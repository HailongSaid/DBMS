/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package dbms;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Administrator
 */
public class DBMSJFrame extends javax.swing.JFrame {

    /**
     * Creates new form DBMSJFrame
     */
    public DBMSJFrame() {
        initComponents();
        jTextArea1.setText(">>");
        load("D:\\Learn\\Netbeans\\daima\\DBMS\\People.txt");
        put(table.getTableName());
        lastTableName = table.getTableName();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                jTextArea1InputMethodTextChanged(evt);
            }
        });
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextArea1KeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable1);

        jMenu1.setText("文件");

        jMenuItem1.setText("打开");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("保存");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setText("另存为");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem6.setText("退出");
        jMenuItem6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem6ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem6);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("操作");

        jMenuItem4.setText("排序");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        jMenu3.setText("帮助");

        jMenuItem5.setText("关于");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu3.add(jMenuItem5);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        JFileChooser cho = new JFileChooser();
        int state = cho.showSaveDialog(null);
        File file = cho.getSelectedFile();
        if(file != null&&state == JFileChooser.APPROVE_OPTION){
            titleName = file.getAbsolutePath();
            this.setTitle(titleName);
            
            save(table);
        }
        flag = 3;
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        String filename;
        String[] extensions = { "txt", "tld" };
        WindowUtilities.setNativeLookAndFeel();
        //从这里开始弹出文件选择框
        filename = ExtensionFileFilter.getFileName(".","txt Files",extensions);
        if (filename == null){
            filename = "D:\\Learn\\Netbeans\\daima\\DBMS\\Peole.txt";
        }
        else {
            put(filename);
            load(filename);
            this.setTitle(filename);
            flag = 1;
            this.titleName = filename;
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        save(table);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem6ActionPerformed
        // TODO add your handling code here:
        int n = JOptionPane.showConfirmDialog(
                this,
                "是否要保存文档？",
                "确认对话框",
                JOptionPane.YES_NO_OPTION
                );
         if(n == JOptionPane.YES_OPTION){
              save(table);
              System.exit(0);
         }
         else
             System.exit(0);
    }//GEN-LAST:event_jMenuItem6ActionPerformed

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jTextArea1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_jTextArea1InputMethodTextChanged
        // TODO add your handling code here:
      
    }//GEN-LAST:event_jTextArea1InputMethodTextChanged

    private void jTextArea1KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyReleased
        // TODO add your handling code here:
        String str = jTextArea1.getText();
        if(str.charAt(str.length() - 1) == '\n'){
            
            String[] lineString = jTextArea1.getText().split("\n");
            String statementSql = lineString[lineString.length - 1].substring(2);
            put(statementSql);
            
            jTextArea1.setText(str + ">>");
            if(statementSql.trim().isEmpty())
                return ;
            StringTokenizer st = new StringTokenizer(statementSql," /(/),'");
            String ss = st.nextToken();
            if(ss.equals("create")){
                table = creatTable(statementSql);
                showTable(table);
            } 
            else if(ss.equals("select")){
                Table tab = selectTable(statementSql);
                 showTable(tab);
            }
            else if(ss.equals("insert")){
                table = insertIntoTable(statementSql);
                showTable(table);
            }
             else if(ss.equals("delete")){
                table = deleteDataFromTable(statementSql);
                showTable(table);
            }
        }
        
    }//GEN-LAST:event_jTextArea1KeyReleased

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        table = sort(table,0);
        showTable(table);
    }//GEN-LAST:event_jMenuItem4ActionPerformed
    
    Table sort(Table tab,int attributeIndex){
        NodeData temp = new NodeData(tab.getAttributeNumber());
        for(int i = 1;i < tab.getRowNumber();i++){
            for(int j = 0;j < tab.getRowNumber() - 1;j++)
                if(
                 tab.getData(j, attributeIndex).toString().compareTo(tab.getData(j + 1, attributeIndex).toString()) > 0
                        ){
                    temp = tab.getData(j);
                    tab.replaceData(j, tab.getData(j + 1));
                    tab.replaceData(j + 1, temp);
                }
        }
        return tab;
    }
    void showTable(Table tab){
        int attributeNumber = tab.getAttributeNumber();
        String columnNames[] = new String[attributeNumber];
        for(int i = 0;i < attributeNumber;i++)
            columnNames[i] = tab.getAttributeName(i);
        int rowNumber = tab.getRowNumber();
        Object data[][] = new Object[rowNumber][attributeNumber];
        for(int i = 0;i < rowNumber;i++)
            for(int j = 0;j < attributeNumber;j++){
                data[i][j] = tab.getData(i,j);
            }
        model = new DefaultTableModel(data,columnNames); 
	jTable1.setModel(model);
        jTable1.repaint();
        jTable1.updateUI();
    }
    void load(String fileName){
        table = new Table(fileName);
        this.setTitle(fileName);
        titleName = fileName;
        flag = 1;
        int attributeNumber = table.getAttributeNumber();
        String columnNames[] = new String[attributeNumber];
        for(int i = 0;i < attributeNumber;i++)
            columnNames[i] = table.getAttributeName(i);
        int rowNumber = table.getRowNumber();
        Object data[][] = new Object[rowNumber][attributeNumber];
        
        for(int i = 0;i < rowNumber;i++)
            for(int j = 0;j < attributeNumber;j++)
               try{ data[i][j] = table.getData(i,j);
        }
        catch(java.lang.ArrayIndexOutOfBoundsException e){
            put(i+" " + j);
        }
        model = new DefaultTableModel(data,columnNames); 
	jTable1.setModel(model);
        jTable1.repaint();
        jTable1.updateUI();
    }
    
    void save(Table table){
        if(jTable1.getEditingRow() != -1)
            jTable2Table(jTable1);
        if(titleName == null&&!lastTableName.equalsIgnoreCase(table.getTableName())){
            File file;
            JFileChooser cho = new JFileChooser();
            int state = cho.showSaveDialog(null);
            String[] extensions = { "txt", "tld" };
            cho.setFileFilter(new FileNameExtensionFilter("*.txt","xml"));
            file = cho.getSelectedFile();
            if(file != null &&state == JFileChooser.APPROVE_OPTION){
                table.writeIntoTxt(file.getAbsolutePath());
            }
            titleName = file.getAbsolutePath();
            this.setTitle(titleName);
            lastTableName = table.getTableName();
        }
        else  if(titleName != null&&flag != 0){
            table.writeIntoTxt(titleName);
        }
         flag = 2; 
        
    }
    void jTable2Table(JTable jTable){
        model = (DefaultTableModel)jTable1.getModel();
        for(int i = 0;i < model.getRowCount();i++)
            for(int j = 0;j < model.getColumnCount();j++)
                 table.setData(i, j,model.getValueAt(i, j));
    }
    void printByTable(Table tab){
        Header headr = tab.headr;
        for(int i = 0;i < headr.attributeNumber;i++){
             System.out.format("%-20s",headr.getAttributeName(i));
        }
        System.out.println();
        for(int i = 0;i < tab.pvData.size();i++){
            NodeData nd = tab.getData(i);
            for(int j = 0;j < nd.data.length;j++)
                 System.out.format("%-20s",nd.get(j));
            System.out.println();
        }
         System.out.println();
    }
    
    
     Table executeStatement(String state){
        StringTokenizer st = new StringTokenizer(state," /(/),'");
	String ss = st.nextToken();
        if(ss.equals("create"))
            return creatTable(state);
        else if(ss.equals("select"))
            return selectTable(state);
        else if(ss.equals("insert"))
            return insertIntoTable(state);
        else if(ss.equals("delete"))
            return deleteDataFromTable(state);
        return new Table();
    }
   Table deleteDataFromTable(String ins){
//       delete People where name = “liu"
       StringTokenizer st = new StringTokenizer(ins," \",/(/) ''");
        st.nextToken();
        String tabname = st.nextToken();
        Table tab;
        if(tabname.equalsIgnoreCase(table.getTableName()))
            tab = table;
        else
            tab = new Table(tabname + ".txt");
        String temp = st.nextToken();
        if("where".equalsIgnoreCase(temp)){
            int N = 10;
            String attributeName[] = new String[N];
            int attributeIndex[] = new int[N];
            String data[] = new String[N];
            char fuhao[] = new char[N];
            int attributeNumber = tab.getAttributeNumber();
//            int rowNumber = tab.getRowNumber();
            int high = 0;
            while(st.hasMoreTokens()){ 
                attributeName[high] = st.nextToken();
                attributeIndex[high] = tab.getAttributeIndex(attributeName[high]);
                if(attributeIndex[high] == -1){
                    JOptionPane.showMessageDialog(null, tabname + "中没有" +attributeName[high] + "属性！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE); 
                    return tab;
                }
                fuhao[high] = st.nextToken().charAt(0);
                data[high] = st.nextToken();
                put(data[high]);
                if(st.hasMoreTokens()&&"and".equalsIgnoreCase(st.nextToken()))
                    high++;
            }
            for(int i = 0;i < tab.getRowNumber();){
                boolean flag = true;
                for(int j = 0;j <= high;j++){
                    if(!compare(
                            tab.getData(i, attributeIndex[j]).toString(),
                            data[j],
                            fuhao[j]
                            )){
                        flag = false;
                        break;
                    }
                }
                if(flag)
                    tab.deleteDataByRow(i);
                else
                    i++;
            }
        }
        else{
            JOptionPane.showMessageDialog(null,temp + "错误！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE); 
            return table;
        }
        return tab;
   }
   boolean compare(String s1,String s2,char c){
       int result = s1.compareTo(s2);
       if(c == '>'&&result > 0)
           return true;
       else if(c == '<'&&result < 0)
           return true;
       else if(c == '='&&result == 0)
           return true; 
       return false;
   }
    Table insertIntoTable(String ins){
        //insert into 表名 values(值1，值2，。。。）；
        StringTokenizer st = new StringTokenizer(ins," ,/(/) \"''");
        st.nextToken();
        String temp = st.nextToken();
        if(!temp.equalsIgnoreCase("into")){
            JOptionPane.showMessageDialog(null,temp + "错误！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE); 
            return table;
        }
        String tabname = st.nextToken();
        Table tab;
        if(tabname.equalsIgnoreCase(table.getTableName()))
            tab = table;
        else
            tab = new Table(tabname + ".txt");
        temp = st.nextToken();
        if("values".equalsIgnoreCase(temp)){
            while(st.hasMoreTokens()){ 
                int attributeNumber = tab.getAttributeNumber();
                NodeData nodedata = new NodeData(attributeNumber);
                for(int i = 0;i < attributeNumber;i++){
                   String s = st.nextToken();
                   put(s);
                   if(table.getAttributeType(i).equalsIgnoreCase("char")||
                      table.getAttributeType(i).equalsIgnoreCase("string")
                      )
                        nodedata.setData(i,s);
                   else
                       nodedata.setData(i,Integer.valueOf(s));
                }
                if(st.hasMoreTokens()){
                    JOptionPane.showMessageDialog(null,tabname +"表中没有这么多属性！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE); 
                   return table;
                }
                tab.pvData.addElement(nodedata);
            }
        }
        else if("as".equals(temp)){
//            Table 查询结果表名 = new Table();
//            for(int i=0;i<查询结果表名.pvData.size();i++)
//                pvData.addElement(查询结果表名.pvData.elementAt(i));
        }
        else{
            JOptionPane.showMessageDialog(null,temp + "错误！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE); 
            return table;
        }
        return tab;  
    }
    Table creatTable(String tab){
        //create table 表名（
        //  属性 数据类型 size ， 
        Table table1 = new Table();
        StringTokenizer st = new StringTokenizer(tab," ,/(/)");//,()
        st.nextToken();
        String temp = st.nextToken(); 
         if(!temp.equalsIgnoreCase("table")){
            JOptionPane.showMessageDialog(null,  temp + "错误！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE); 
            return table;
        }
        table1.headr.tableName = st.nextToken();
        System.out.println(table1.headr.tableName);
        String dataType;
        while(st.hasMoreTokens()){ 
            Node node = new Node(
                    st.nextToken(),
                    dataType = st.nextToken(),
                    Integer.parseInt(st.nextToken())
                    );
            if(!isBaseDataType(dataType)){
                JOptionPane.showMessageDialog(null, dataType + "不是基本数据！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE); 
                 return table;
            }
                
	    table1.headr.append(node);
	}
        table1.pvData = new Vector();
        return table1;
    }
    
    boolean isBaseDataType(String dataType){
        if(dataType.equalsIgnoreCase("string")||
           dataType.equalsIgnoreCase("char")||
           dataType.equalsIgnoreCase("int")||
           dataType.equalsIgnoreCase("double")||   
           dataType.equalsIgnoreCase("float")
           )
            return true;
        return false;
    }
    Table selectTable(String sel){
        // select * from 表名 
        //where 条件 /////
        StringTokenizer st = new StringTokenizer(sel," \",/(/) ''");
        st.nextToken();
         if("*".equals(st.nextToken())){
            String temp = st.nextToken();
            if(!temp.equalsIgnoreCase("from")){
            JOptionPane.showMessageDialog(null,  temp + "错误！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE); 
            return table;
            }
            
            String tabname = st.nextToken();
            Table tab;
            if(tabname.equalsIgnoreCase(table.getTableName())){
                tab = new Table(table);
            }
            else
                tab = new Table(tabname + ".txt");
            if(st.hasMoreTokens()){
                temp = st.nextToken();
                if("where".equalsIgnoreCase(temp)){
                int N = 10;
                String attributeName[] = new String[N];
                int attributeIndex[] = new int[N];
                String data[] = new String[N];
                char fuhao[] = new char[N];
                int attributeNumber = tab.getAttributeNumber();
                int high = 0;
                while(st.hasMoreTokens()){ 
                    attributeName[high] = st.nextToken();
                    attributeIndex[high] = tab.getAttributeIndex(attributeName[high]);
                    if(attributeIndex[high] == -1){
                        JOptionPane.showMessageDialog(null, tabname + "中没有" +attributeName[high] + "属性！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE); 
                        return tab;
                    }
                    fuhao[high] = st.nextToken().charAt(0);
                    data[high] = st.nextToken();
                    put(data[high]);
                    if(st.hasMoreTokens()&&"and".equalsIgnoreCase(st.nextToken()))
                        high++;
                }
                for(int i = 0;i < tab.getRowNumber();){
                    boolean flag = true;
                    for(int j = 0;j <= high;j++)
                        if(!compare(
                                tab.getData(i, attributeIndex[j]).toString(),
                                data[j],
                                fuhao[j]
                                )){
                            flag = false;
                            break;
                        }
                    if(!flag)
                        tab.deleteDataByRow(i);
                    else
                        i++;
                }
            }
            else
                JOptionPane.showMessageDialog(null,temp + "错误！请重新输入！","提示信息", JOptionPane.INFORMATION_MESSAGE);     
            }
            return tab;
         }
      else
        return new Table();
        
    }
    Table selectTable1(String sel){
        // select * from 表名 
        //where 条件 /////
        StringTokenizer st = new StringTokenizer(sel," ,/(/)\"");
        st.nextToken();
        if("*".equals(st.nextToken())){
            st.nextToken();
            String tabname = st.nextToken();
            if(tabname.equalsIgnoreCase(table.getTableName()))
                return table;
            else
                return new Table(tabname + ".txt");
        }
        else{
            return  new Table();
        }
    } 
    void put(Object str){
        System.out.println(str);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DBMSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DBMSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DBMSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DBMSJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DBMSJFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
    int flag = 0;
    String titleName = "";
    Table table;
    String lastTableName = "";
    DefaultTableModel model = new DefaultTableModel();
}
